Notetaking, Introduction to Computation and Programming using Python

Ch. 1:

declarative knowledge

imperative knowledge

guess the square root by (guess + square/guess)/2

75 + 100/75 / 2 75.75/2 
37.1841

Turing completeness

Fixed program computer

algorithm definition, as like a recipe, a simple sequence of steps with a flow of control (as in a flow chart) and execut

computations

infix operators
literals

syntax

semantics

static semantics

    
Ch. 2: 

Objects Expressions and Numerical Types

Scalar, non scalar

integers, floating point numbers

Boolean: True and False

Operators and objects form expressions

== != > >= < <= + * / // - ( ) **

<< >> >>= <<= |= ^= ~= and or not

is
is not
is in
for x in
if x is not
if x is
if x in y
if not (x in y)

reserved words

and
as
assert
async
await
break
class
continue
def
del
elif
else
except
False
finally
for
from
global
if
import
in
is
lambda
nonlocal
None
not
or
pass
raise
return
True
try
while
with
yield

BRANCHING 21

straight line programs


Ch. 3:
    
    x = int(input("Enter an integer: "))
    ans = 0
    while(ans ** 2 < abs(x)):
    if (ans ** 2) != abs(x):
        print("{} is not a perfect square".format(x))
    else:
        print("{} is a perfect square of {} x {}".format(x, ans, ans))
guess and check variant ... exhaustive enumeration
approximation
51 review exhaustive enumeration square root

bisection search

numbers, assignments, input output, comparisons, relations, looping constructs
function definition, function parameters, invocation / call
lambda abstraction
test functions
keyword arguments and default function parameter values
unpacking operator (variable number of function parameters)
namespace, scope, local variable, global variable, symbol table
lexical scoping
4.2 Specifications

A specification defines a contract between the software designer implementing a function and the end user of that function

Assumptions
guarantees
Decomposition -> creating structure, allowing us to reuse code and break it into autonomous and usable pieces
Abstraction -> hides detail from other areas, uses information relevant to context

p. 83

Declarative Knowledge: Statements of Fact
Imperative Knowledge: Refers to How-To Statements of Fact
Binary Data, Computers as binary machines
Types: int, float, string, tuple, list, dictionary, Boolean, object, method / function, combinations e.g. lists of ints, floats, strings, tuples, lists; dictionaries as key value pairs, value able to be a combined type; integer and floating point range and precision

assignment LHS RHS bind variable id

Conditionals, branching, loops

if - else; if - elif - else

for x in iterable type e.g. generator
for x in range(0, n + 1, step)
for x in list, dictionary, string, iterable types

while ():
    
Operators and operands

Addition, subtraction, multiplication, integer division, floating point division, modulus, exponentiation, concatenation

Class methods and object types, operator overloading

Logical operators, and, or, not

import as
from x import y as z
OOP

Function abstraction and decomposition into functions

The simplest branching flow of control is a conditional, evaluated as a boolean expression which is True or False

not and or

NOT -> True if A is False, False if A is True
AND -> True if both are True
OR -> True if Either or Both are True (False if Both are False)

making choices via branching

program counter execution is still linear

nested if else conditions for 3 or 2 if elif else clauses


if ( ):
    if ( ):
        if():
        
        else:
    else:
else:



while(condition evaluating to True):
    set choice
    update condition
extraneous parameters

while (condition):
    expression of literals and operators on objects
   
condition evaluates to a Boolean
if condition is True, until it is False take all expressions and execute them in the program counter
check condition until it evaluates Falss
repeat until condition is False

n = 0
while(n < 5):
    print(n)
    n += 1
    
for n in range(5):
    print(n)
    
    
0, 1, 2, 3, 4

while(condition_1):
    while(condition_2):
        if x:
            break
        else:
            continue
      expression_b
expression_c

Objects Expressions and Numerical Types

Scalar, non scalar

integers, floating point numbers

Boolean: True and False

Operators and objects form expressions

== != > >= < <= + - * / // ( ) ** % =
if x in y is not False
if x != q is not False or y == r is True

<< >> & | ~ ^

and or not

if ():

elif:

else:

for x in range, iterable

while (condition):

if ():
    if():
        if():

(g + x/g)/2
average

is
is not
is in
for x in
if x is not
if x is
if x in y
if not (x in y)

reserved words

and
as
assert
async
await
break
class
continue
def
del
elif
else
except
False
finally
for
from
global
if
import
in
is
lambda
nonlocal
None
not
or
pass
raise
return
True
try
while
with
yield


p. 83

Python standard library, module documentation, included functions

Functions as objects, higher order programming, treating pointers to functions as other function parameters

methods.

Chapter 5 -> review all definitions back to Ch. 0 and summarise definition

    
Ch 6.
base case, recursive or induction case

Definition of factorial recursively and iteratively

Fibonacci numbers, fraction summation, sequences and series, harmonic sum

Recursive implementation of Fibonacci numbers

Palindrome Testing

Review

Ch. 7

Modules and Files


validity, modularity of tasks / specifications / function definitions, breaking up a task into smaller subtasks, example inputs, outputs

Testing and Debugging Lecture 1 edX

chart

DEFENSIVE PROGRAMMING

-    Write Specifications for Functions, Contextual Def'ns to accomplish task'
-    Modularise programs (ize -ise British)
-    Check conditions on inputs/outputs

Testing / Validation

-    Compare input and output to specs
-    "It's not working"
-    "How can I break my program?"

Debugging

-  Study events leading to an error
-  "Why is it not working"
-  "How can I fix my program"


RETURN TO CHAPTERS 7 TO 9 LATER ON



Classes and Objects
thinking about objects as collections of data and methods

Type of an object
__init__, __str__, __repr__, __gt__, __ge__, __lt__, __le__ etc ...
abstract data type - set of objects and the data and operations on those objects
inheritance, polymorphism
Specifications of operations on that data define an interface between the abstract data type and the latter Python program

The interface provides an abstraction barrier

Decomposition creates structure, abstraction suppresses detail (linearising and solving implementation into individual and comprehensive functions, objects, variables, and operators and branching structures, and loops)

defensive programming. unexpected condition

exceptions

IndexError
NameError
TypeError

try:

except ValueError:
except IOError:
except ZeroDivisionError:
else:
finally:

ALL FOR ROTE MEMORISATION TERM FOR TERM, TYPE FOR TYPE, OPERATOR FOR OPERATOR, CLAUSE FOR CLAUSE, KEYWORD FOR KEYWORD and MIT syllabus implemented in Python

Detour back to Newton Raphson

successive approximation


Approximation method, Newton's method. 

while not true guess is answer
guess = guess - (y(guess) / dy/dx(guess))

Bisection Search

guess = (high + low)/2.0
    or
take the average of guess ... as either half of guess as thw low or high point and divide guess by two
g + (x/g)/2

exhaustive enumeration

for the range of possible values, set an epsilon between the entire range from the low point, increment it until it reachws the high point


Monkey Sort

|
|   . .  /  .  . .. 
| . . ./    .
|    / .  .    . .
|  /    .  .    .
|/___________

Complexity: 

def monkey_sort(L):
while not is_sorted(L):
    random.sort(L)


Review Google for implementations of Monkey Sort


Bubble Sort

def bubble_sort(L):
    swap = False
    while not swap:
        swap = True
            for j in range(1, len(L)):
                if L[ j- 1 ] > L[ j ]:
                    swap = False
                    temp = L[ j ]
                    L[ j ] = L [ j - 1 ]
                    L[ j - 1 ] = temp
                    
                    
Selection Sort

def selectionsort(L):
    end = 0
    while end != len(L):
        for i in range(end, len(L)):
            if L[i] < L[end]:
                L[end] = L[i]
                L[i] = L[end]
        end += 1
        
        
Merge Sort


def merge(left, right):
    result = []
    i, j = 0, 0
    while (i < len(left)) and (j < (len(right))):
        print("i: {} j: {}".format(i, j))
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        elif left[i] > right[j]:
            result.append(right[j])
            j += 1
    while (i < len(left)):
        result.append(left[i])
        i += 1
    while (j < len(right)):
        result.append(right[j])
        j += 1
    print(result)
    return result
      
      
def merge_sort(L):
    
    if len(L) >= 2:
        mid = len(L) // 2
        print("mid: {}, {}, {}".format(mid, L[:mid], L[mid:]))
        left = merge_sort(L[:mid])
        right = merge_sort(L[mid:])
        print(left, right)
        return merge(left, right)
    else:
        return L[:]
 
def main():
    L = [2, 4, 8, 1, 7, 9, 3, 5]
    print("Final merged list: {}".format(merge_sort(L)))
    print("CTW Truscott Watters MIT Student")
    
    
if __name__ == "__main__": main()


MS OUTPUT

mid: 4, [2, 4, 8, 1], [7, 9, 3, 5]
mid: 2, [2, 4], [8, 1]
mid: 1, [2], [4]
[2] [4]
i: 0 j: 0
[2, 4]
mid: 1, [8], [1]
[8] [1]
i: 0 j: 0
[1, 8]
[2, 4] [1, 8]
i: 0 j: 0
i: 0 j: 1
i: 1 j: 1
[1, 2, 4, 8]
mid: 2, [7, 9], [3, 5]
mid: 1, [7], [9]
[7] [9]
i: 0 j: 0
[7, 9]
mid: 1, [3], [5]
[3] [5]
i: 0 j: 0
[3, 5]
[7, 9] [3, 5]
i: 0 j: 0
i: 0 j: 1
[3, 5, 7, 9]
[1, 2, 4, 8] [3, 5, 7, 9]
i: 0 j: 0
i: 1 j: 0
i: 2 j: 0
i: 2 j: 1
i: 3 j: 1
i: 3 j: 2
i: 3 j: 3
[1, 2, 3, 4, 5, 7, 8, 9]
Final merged list: [1, 2, 3, 4, 5, 7, 8, 9]
CTW Truscott Watters MIT Student

[Program finished]

Ch. 7 to 9


Chapter 10. Classes and Object-Oriented Programming (OO, UML)



class Object(object):
    def __init__(self, name, birthdate):
        self.name = name
        self.birthdate = birthdate
        
class definition, data attributes, method attributes, setters and getters, data abstraction, inheritance

import numpy
import math

# Charles Thomas Wallace Truscott Watters
class OrderedPair(object):
    def __init__(self, tups):
        self.tups, tups = tups, []
    def __str__(self):
        return str(self.tups)
class LinearEquation(OrderedPair):
    def __init__(self, m, b, low, high):
        self.m = m
        self.b = b
        self.low = low
        self.high = high
        tups = []
        for x in range(low, high, 1):
            tups.append((x, self.m * x + self.b),)
            print(x, self.m * x + self.b)
        super().__init__(tups)
def main():
        x = LinearEquation(2, 5, 0, 11)
        print(x)
            
if __name__ == "__main__": main()


