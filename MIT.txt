Declarative Knowledge: Statements of Fact
Imperative Knowledge: Refers to How-To Statements of Fact
Binary Data, Computers as binary machines
Types: int, float, string, tuple, list, dictionary, Boolean, object, method / function, combinations e.g. lists of ints, floats, strings, tuples, lists; dictionaries as key value pairs, value able to be a combined type; integer and floating point range and precision
higher order, dynamic programming
assignment LHS RHS bind variable id

Conditionals, branching, loops

if - else; if - elif - else

for x in iterable type e.g. generator
for x in range(0, n + 1, step)
for x in list, dictionary, string, iterable types

while ():
    
Operators and operands

Addition, subtraction, multiplication, integer division, floating point division, modulus, exponentiation, concatenation

Class methods and object types, operator overloading

Logical operators, and, or, not

import as
from x import y as z
OOP

Function abstraction and decomposition into functions

The simplest branching flow of control is a conditional, evaluated as a boolean expression which is True or False

not and or

NOT -> True if A is False, False if A is True
AND -> True if both are True
OR -> True if Either or Both are True (False if Both are False)

making choices via branching

program counter execution is still linear

nested if else conditions for 3 or 2 if elif else clauses


if ( ):
    if ( ):
        if():
        
        else:
    else:
else:



while(condition evaluating to True):
    set choice
    update condition
extraneous parameters

while (condition):
    expression of literals and operators on objects
   
condition evaluates to a Boolean
if condition is True, until it is False take all expressions and execute them in the program counter
check condition until it evaluates Falss
repeat until condition is False

n = 0
while(n < 5):
    print(n)
    n += 1
    
for n in range(5):
    print(n)
    
    
0, 1, 2, 3, 4

while(condition_1):
    while(condition_2):
        if x:
            break
        else:
            continue
      expression_b
expression_c

Objects Expressions and Numerical Types

Scalar, non scalar

integers, floating point numbers

Boolean: True and False

Operators and objects form expressions

== != > >= < <= + - * / // ( ) ** % =

<< >> & | ~ ^

and or not

if ():

elif:

else:

for x in range, iterable

while (condition):

if ():
    if():
        if():

(g + x/g)/2
average

is
is not
is in
for x in
if x is not
if x is
if x in y
if not (x in y)

reserved words

and
as
assert
async
await
break
class
continue
def
del
elif
else
except
False
finally
for
from
global
if
import
in
is
lambda
nonlocal
None
not
or
pass
raise
return
True
try
while
with
yield
